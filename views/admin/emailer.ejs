<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Window Knight Admin Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
   <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href = "/assets/css/admin/prospects.css"/>
  <link rel="stylesheet" href = "/assets/css/admin/dashboard.css"/>
  <link rel="stylesheet" href = "/assets/css/admin/emailer.css"/>

</head>
<body>

  <header>
    <h1>Window Knight Admin</h1>
    <div class="profile-dropdown">
      <i class="fas fa-user-circle fa-2x"></i>
      <div class="profile-dropdown-content">
        <a href="/">Main Site</a>
        <a href="#">Change Password</a>
        <a href="#">Download Data</a>
        <a href="/logout">Logout</a>
      </div>
    </div>
  </header>


  <div id="popupNotification" class="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-6 py-3 rounded shadow-lg hidden transition-opacity duration-300 z-90" style="z-index:99999999999999999">
  <p id="popupMessage" class="text-sm font-medium"></p>
</div>


  <main class="dashboard-container">

    <nav>
      <a href="/admin/emailer"><i class="fas fa-envelope"></i> Emailer</a>
      <a href="/admin/blogger"><i class="fas fa-pen-nib"></i> Blogger</a>
      <a href="#"><i class="fas fa-calendar-alt"></i> Scheduler</a>
      <a href="#"><i class="fas fa-chart-line"></i> Sales</a>
      <a href="#"><i class="fas fa-file-invoice-dollar"></i> Online Quotes</a>
      <a href="#"><i class="fas fa-wallet"></i> Finances</a>
      <a href="#"><i class="fas fa-brain"></i> AI Journal</a>
      <a href="#"><i class="fas fa-image"></i> Image Uploader</a>
      <a href="/admin/prospect"><i class="fas fa-plug"></i> Prospects </a>
    </nav>

    <div class="emailer-container">
      <div class="p-6 bg-gray-900 text-white min-h-screen">
        <h1 class="text-3xl font-bold mb-6 text-blue-400">Email Templates</h1>


        <!-- Email Templates Grid -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <!-- Add Placeholder Card -->
          <div onclick="toggleEmailModal()" class="cursor-pointer border-dashed border-2 border-blue-400 rounded-lg p-6 flex flex-col items-center justify-center hover:bg-gray-800 transition">
            <span class="text-5xl">+</span>
            <p class="mt-2 text-blue-300">Add Email Template</p>
          </div>

          <!-- Example Template Card -->
          <% templates.forEach(template => { %>
            <div class="bg-gray-800 rounded-lg shadow-lg overflow-hidden relative group">
              <img src="/uploads/<%= template.coverImage %>" class="h-32 w-full object-cover" />

              <!-- Use Template Button -->
              <button onclick='openProspectModal("<%= template._id %>")'
                      class="absolute top-2 right-2 bg-blue-500 hover:bg-blue-700 text-white text-sm px-3 py-1 rounded-full z-10">
                Use
              </button>

              <div class="p-4">
                <h3 class="text-lg font-bold mb-1"><%= template.title %></h3>
                <p class="text-sm text-blue-300 mb-1 font-semibold">Subject: <%= template.subject %></p>
                <p class="text-sm text-gray-400 truncate"><%= template.body %></p>
              </div>

              <!-- Dropdown for Edit/Delete -->
              <div class="absolute bottom-2 left-2">
                <button onclick='toggleTemplateDropdown("<%= template._id %>")'
                        class="text-sm text-gray-300 hover:text-white">‚ãÆ</button>

                <div id="dropdown-<%= template._id %>" class="hidden bg-gray-700 rounded shadow-md mt-2 absolute z-50">
                  <button onclick='editTemplate(<%- JSON.stringify(template) %>)'
                          class="block w-full text-left px-4 py-2 hover:bg-gray-600 text-sm">‚úèÔ∏è Edit</button>
                  <button onclick='deleteTemplate("<%= template._id %>")'
                          class="block w-full text-left px-4 py-2 hover:bg-gray-600 text-sm text-red-400">üóëÔ∏è Delete</button>
                </div>
              </div>
            </div>
          <% }) %>
        </div>
      </div>

    </div>

    <div id="popupNotification" class="fixed top-6 left-1/2 transform -translate-x-1/2 z-50 px-6 py-3 rounded-lg shadow-lg text-white text-sm font-medium hidden transition-all duration-300"
       style="background: linear-gradient(to right, #16a34a, #065f46);">
    <span id="popupMessage"></span>
  </div>

  <div id="prospectModal" class="fixed inset-0 bg-black bg-opacity-70 hidden justify-center items-center z-50">
  <div class="bg-gray-800 p-6 rounded-lg w-full max-w-3xl text-white relative">
    <h2 class="text-xl font-bold mb-4">Select Prospects</h2>
    <div class="grid grid-cols-2 gap-4 max-h-96 overflow-y-auto">
      <% prospects.forEach(p => { %>
        <div onclick="toggleProspectSelect('<%= p._id %>')" id="prospect-<%= p._id %>"
             class="border border-gray-600 rounded p-2 cursor-pointer hover:bg-gray-700">
          <p class="font-semibold"><%= p.name %></p>
          <p class="text-sm text-gray-400"><%= p.email || p.phone %></p>
        </div>
      <% }) %>
    </div>
    <div class="text-right mt-4">
      <button onclick="submitSelectedProspects()" class="bg-green-600 px-4 py-2 rounded hover:bg-green-700">Send</button>
      <button onclick="closeProspectModal()" class="ml-2 text-gray-300">Cancel</button>
    </div>
  </div>
</div>


<div id="emailModal" class="fixed inset-0 bg-black bg-opacity-60 hidden justify-center items-center z-50">
  <div class="bg-gray-800 p-6 rounded-lg w-full max-w-xl text-white relative">
    <h2 class="text-xl font-bold mb-4">Add / Edit Template</h2>
    <form id="emailForm" enctype="multipart/form-data">
      <input type="hidden" id="emailTemplateId">

      <div class="mb-3">
        <label>Cover Image</label>
        <input type="file" name="cover" class="block mt-1 text-sm" />
      </div>

      <div class="mb-3">
        <label>Title</label>
        <input name="title" class="w-full p-2 bg-gray-700 rounded" required />
      </div>

      <div class="mb-3">
        <label>Subject</label>
        <input name="subject" class="w-full p-2 bg-gray-700 rounded" required />
      </div>

      <div class="mb-3">
        <label>Body</label>
        <textarea name="body" rows="5" class="w-full p-2 bg-gray-700 rounded" required></textarea>
      </div>

      <div class="text-right">
        <button type="submit" class="bg-blue-500 px-4 py-2 rounded hover:bg-blue-600">Save</button>
        <button type="button" onclick="toggleEmailModal()" class="ml-2 text-gray-300">Cancel</button>
      </div>
    </form>
  </div>
</div>

<div id="ai-loader-overlay" class="hidden">
  <div class="ai-loader-spinner"></div>
  <p>Generating and sending emails... Please wait.</p>
</div>

  </main>


  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.2/axios.min.js" integrity="sha512-b94Z6431JyXY14iSXwgzeZurHHRNkLt9d6bAHt7BZT38eqV+GyngIi/tVye4jBKPYQ2lBdRs0glww4fmpuLRwA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script>

    let isEditing = false;
    let editingTemplateId = null;

    function toggleEmailModal(template = null) {
    const modal = document.getElementById('emailModal');
    const form = document.getElementById('emailForm');

    if (template) {
      isEditing = true;
      editingTemplateId = template._id;
      form.title.value = template.title;
      form.subject.value = template.subject;
      form.body.value = template.body;
    } else {
      isEditing = false;
      editingTemplateId = null;
      form.reset();
    }

    modal.classList.toggle('hidden');
    modal.classList.toggle('flex');
    }

    document.getElementById('emailForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);

      const method = isEditing ? 'PUT' : 'POST';
      const url = isEditing ? `/admin/emailer/${editingTemplateId}` : '/admin/emailer/';

      try {
        const res = await fetch(url, {
          method,
          body: formData
        });
        const result = await res.json();
        if (result.success) {
          toggleEmailModal();
          showPopup(isEditing ? "Template updated!" : "Template added!");
          setTimeout(() => location.reload(), 1200);
        } else {
          showPopup(result.message || "Failed to save template.", true);
        }
      } catch (err) {
        console.error(err);
        showPopup("Server error.", true);
      }
    });

    function toggleTemplateDropdown(id) {
  document.querySelectorAll('[id^="dropdown-"]').forEach(el => {
    if (el.id !== `dropdown-${id}`) el.classList.add("hidden");
  });
  document.getElementById(`dropdown-${id}`).classList.toggle('hidden');
}


async function deleteTemplate(id) {
  if (!confirm("Delete this template?")) return;
  try {
    const res = await fetch(`/admin/email-templates/${id}`, {
      method: 'DELETE'
    });
    const result = await res.json();
    if (result.success) {
      showPopup("Template deleted.");
      setTimeout(() => location.reload(), 1000);
    } else {
      showPopup(result.message || "Delete failed.", true);
    }
  } catch (err) {
    console.error(err);
    showPopup("Server error during delete.", true);
  }
}


let selectedTemplateId = null;
let selectedProspects = new Set();

function openProspectModal(templateId) {
  selectedTemplateId = templateId;
  selectedProspects.clear();
  document.querySelectorAll('[id^="prospect-"]').forEach(p => {
    p.classList.remove('bg-green-700');
  });

  const modal = document.getElementById('prospectModal');
  modal.classList.remove('hidden');
  modal.classList.add('flex');
}

function closeProspectModal() {
  const modal = document.getElementById('prospectModal');
  modal.classList.add('hidden');
  modal.classList.remove('flex');
}


function toggleProspectSelect(id) {
  const el = document.getElementById(`prospect-${id}`);
  if (selectedProspects.has(id)) {
    selectedProspects.delete(id);
    el.classList.remove('bg-green-700');
  } else {
    selectedProspects.add(id);
    el.classList.add('bg-green-700');
  }
}


async function submitSelectedProspects() {
  if (!selectedTemplateId || selectedProspects.size === 0) {
    showPopup("Select at least one prospect.", true);
    return;
  }

  const loader = document.getElementById("ai-loader-overlay");
  loader.classList.remove("hidden"); // show loader

  try {
    const res = await fetch('/admin/emailer/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        templateId: selectedTemplateId,

        prospectIds: Array.from(selectedProspects)
      })
    });
    const result = await res.json();
    if (result.success) {
      showPopup("Emails sent!");
      closeProspectModal();
    } else {
      showPopup(result.message || "Send failed.", true);
    }
  } catch (err) {
    console.error(err);
    showPopup("Server error while sending.", true);
  }
  finally {
      loader.classList.add("hidden"); // hide loader
  }
}


function showPopup(message, isError = false) {
  const popup = document.getElementById("popupNotification");
  const msg = document.getElementById("popupMessage");

  popup.style.background = isError
    ? "linear-gradient(to right, #dc2626, #7f1d1d)" // red tone
    : "linear-gradient(to right, #16a34a, #065f46)"; // green tone

  msg.innerHTML = message;
  popup.classList.remove("hidden", "opacity-0");
  popup.classList.add("opacity-100");

  setTimeout(() => popup.classList.add("opacity-0"), 2500);
  setTimeout(() => popup.classList.add("hidden"), 3000);
}






  </script>

  </body>
  </html>
